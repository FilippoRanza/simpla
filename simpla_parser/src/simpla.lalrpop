
use crate::syntax_tree;

grammar;

pub Program : syntax_tree::Program = {
    <global_vars: VarDeclList> <functions: FuncDeclList> <body: Body> DotPunct => syntax_tree::Program::new(<>)
}

VarDeclList: syntax_tree::VarDeclList = {
    <list:(VarDecl)*> => {
        list
    }
}

VarDecl : syntax_tree::VarDecl = {
    <begin: @L> <id_list: IdList> ColonPunct <kind: TypeDecl>  SemicolonPunct <end: @R>=> syntax_tree::VarDecl::new(id_list, kind, begin, end)
}

IdList: syntax_tree::IdList = {
    <id_list: (<Id> CommaPunct)*> <id: Id> => {
        let mut list = id_list;
        list.push(id);
        list
    }
}

FuncDeclList: syntax_tree::FuncDeclList = {
    <list:(FuncDecl)*> => {
        list
    }
}


FuncDecl: syntax_tree::FuncDecl = {
    <begin: @L> FuncKW <id:(Id)> OpenBracketPunct
     <params: ParamList> CloseBracketPunct ColonPunct
      <kind: TypeDecl> <vars: VarDeclList> <body:Body>
       SemicolonPunct <end: @R> => syntax_tree::FuncDecl::new(id, params, kind, vars, body, begin, end)
}

ParamList: syntax_tree::ParamList = {
    <list: (<FuncParam> CommaPunct)*> <param: (FuncParam)?> => match param {
        Some(param) => {
            let mut list = list;
            list.push(param);
            list
        }
        None => list
    }
   
}

FuncParam: syntax_tree::ParamDecl = {
    <id: Id> ColonPunct <kind: TypeDecl> => syntax_tree::ParamDecl::new(<>)
}

Body: syntax_tree::StatList = { 
    BodyKW <StatList> EndKW
}

StatList : syntax_tree::StatList = {
    <(<Stat> SemicolonPunct)+>
}

Stat: syntax_tree::Stat = {
    <begin: @L> <assign_stat:(AssignStat)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::AssignStat(assign_stat), begin, end),
    <begin: @L> <if_stat:(IfStat)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::IfStat(if_stat), begin, end),
    <begin: @L> <while_stat:(WhileStat)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::WhileStat(while_stat), begin, end),
    <begin: @L> <for_stat:(ForStat)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::ForStat(for_stat), begin, end),
    <begin: @L> <return_stat:(ReturnStat)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::ReturnStat(return_stat), begin, end),
    <begin: @L> <read_stat:(ReadStat)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::ReadStat(read_stat), begin, end),
    <begin: @L> <write_stat:(WriteStat)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::WriteStat(write_stat), begin, end),
    <begin: @L> <func_call:(FuncCall)> <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::FuncCall(func_call), begin, end),
    <begin: @L> BreakKW <end: @R> => syntax_tree::Stat::new(syntax_tree::StatType::Break, begin, end)
}

AssignStat : syntax_tree::AssignStat = {
     <id:Id> AssignPunct <expr: Expr> => syntax_tree::AssignStat::new(id, expr)
}

IfStat : syntax_tree::IfStat = {
     IfKW <cond:Expr> ThenKW <if_body: StatList> <else_body: (ElseStat)?> EndKW
        => syntax_tree::IfStat::new(cond, if_body, else_body)
}

ElseStat: syntax_tree::StatList = {
    ElseKW <StatList>
}

WhileStat : syntax_tree::WhileStat = {
    WhileKW <cond: Expr> DoKW <body: StatList> EndKW=> syntax_tree::WhileStat::new(cond, body)
}

ForStat : syntax_tree::ForStat = {
    ForKW <id:Id> AssignPunct <begin_expr: Expr> ToKW <end_expr: Expr> DoKW <body: StatList> EndKW
        => syntax_tree::ForStat::new(id, begin_expr, end_expr, body)
}

ReturnStat : Option<syntax_tree::Expr> = {
    ReturnKW <expr: (Expr)?>  => {
        expr
    }
}

ReadStat : syntax_tree::IdList = {
    ReadKW OpenBracketPunct <list: IdList> CloseBracketPunct  => {
        list
    }
}

WriteStat : syntax_tree::WriteStat = {
    WriteKW OpenBracketPunct <list: ExprList> CloseBracketPunct  => syntax_tree::WriteStat::Write(list),
    WritelnKW OpenBracketPunct <list: ExprList> CloseBracketPunct  => syntax_tree::WriteStat::WriteLine(list),
}

FuncCall : syntax_tree::FuncCall = {
    <id:Id> OpenBracketPunct <args: ExprList> CloseBracketPunct
        => syntax_tree::FuncCall::new(id, args)
}

ExprList : syntax_tree::ExprList = {
    <list: (<Expr> CommaPunct)*> <expr: (Expr)?> => match expr {
        Some(expr) => {
            let mut list = list;
            list.push(expr);
            list
        }
        None =>{ 
            list
        }
    }
}


Expr: syntax_tree::Expr = {
    <begin: @L> <l: Expr> <op: LogicOp> <r: BoolTerm> <end: @R> => {
        let tree = syntax_tree::ExprTree::Node(Box::new(l), op, Box::new(r));
        syntax_tree::Expr::new(tree, begin, end)
    },
    <BoolTerm> 
}


BoolTerm: syntax_tree::Expr = {
    <begin: @L> <l: RelTerm> <op: RelOp> <r: RelTerm> <end: @R> => {
        let tree = syntax_tree::ExprTree::Node(Box::new(l), op, Box::new(r));
        syntax_tree::Expr::new(tree, begin, end)
    },
    <RelTerm>
}

RelTerm: syntax_tree::Expr = {
    <begin: @L> <l: RelTerm> <op: LowPrecOp> <r: LowTerm> <end: @R> => {
        let tree = syntax_tree::ExprTree::Node(Box::new(l), op, Box::new(r));
        syntax_tree::Expr::new(tree, begin, end)
    },
    <LowTerm>
}

LowTerm: syntax_tree::Expr = {
    <begin: @L> <l: LowTerm> <op: HighPrecOp> <fact_begin: @L> <r: Factor>  <fact_end: @R> <end: @R> => {
        let fact = syntax_tree::ExprTree::Factor(r);
        let tree = syntax_tree::ExprTree::Node(Box::new(l), op, Box::new(syntax_tree::Expr::new(fact, fact_begin, fact_end)));
        syntax_tree::Expr::new(tree, begin, end)
    },
    <begin: @L> <f: Factor> <end: @R> => {
        let fact = syntax_tree::ExprTree::Factor(f);
        syntax_tree::Expr::new(fact, begin, end)
    }
}


Factor: syntax_tree::Factor = {
    <id: Id> => syntax_tree::Factor::new(syntax_tree::FactorValue::Id(id)),
    <unary: UnaryOp> => syntax_tree::Factor::new(syntax_tree::FactorValue::UnaryOp(<>)),
    <cond: CondExpr> => syntax_tree::Factor::new(syntax_tree::FactorValue::CondExpr(<>)),
    <cast: CastExpr> => syntax_tree::Factor::new(syntax_tree::FactorValue::CastExpr(<>)),
    <fcall: FuncCall> => syntax_tree::Factor::new(syntax_tree::FactorValue::FuncCall(<>)),
    <ConstFactor> => syntax_tree::Factor::new(syntax_tree::FactorValue::Const(<>)),
    OpenBracketPunct <e: Expr> CloseBracketPunct => {
        match e.expr {
            syntax_tree::ExprTree::Factor(
                syntax_tree::Factor{
                    fact: syntax_tree::FactorValue::HighPrecedence(e), kind: _
                }
            ) => syntax_tree::Factor::new(syntax_tree::FactorValue::HighPrecedence(e)),
            _ => syntax_tree::Factor::new(syntax_tree::FactorValue::HighPrecedence(Box::new(e)))
        }
    },
}

UnaryOp: syntax_tree::UnaryOp = {
    MinusPunct <f: Factor> => syntax_tree::UnaryOp::Minus(Box::new(f)),
    NotKW <f: Factor> => syntax_tree::UnaryOp::Negate(Box::new(f)),
}

CondExpr: syntax_tree::CondExpr = {
     IfKW <cond: Expr> ThenKW <true_stat: Expr> ElseKW <false_stat: Expr> EndKW 
        => syntax_tree::CondExpr::new(cond, true_stat, false_stat)
}

CastExpr: syntax_tree::CastExpr = {
    IntegerKW OpenBracketPunct <e: Expr> CloseBracketPunct  => syntax_tree::CastExpr::Integer(Box::new(e)),
    RealKW OpenBracketPunct <e: Expr> CloseBracketPunct  => syntax_tree::CastExpr::Real(Box::new(e)),
}

ConstFactor: syntax_tree::Const = {
    <IntConst> => syntax_tree::Const::IntConst(<>),
    <RealConst> => syntax_tree::Const::RealConst(<>),
    <StrConst> => syntax_tree::Const::StrConst(<>),
    TrueKW => syntax_tree::Const::BoolConst(true),
    FalseKW => syntax_tree::Const::BoolConst(false)
}


LogicOp: syntax_tree::Operator = {
    AndKW  => syntax_tree::Operator::And,
    OrKW => syntax_tree::Operator::Or,
}

LowPrecOp: syntax_tree::Operator = {
    PlusPunct => syntax_tree::Operator::Add,
    MinusPunct => syntax_tree::Operator::Sub
}

HighPrecOp: syntax_tree::Operator = {
    MultiplyPunct => syntax_tree::Operator::Mul,
    DividePunct => syntax_tree::Operator::Div
}

RelOp: syntax_tree::Operator = {
    EqualPunct => syntax_tree::Operator::Equal,
    NotEqualPunct => syntax_tree::Operator::NotEqual,
    GreaterPunct => syntax_tree::Operator::Greater,
    LessPunct => syntax_tree::Operator::Less,
    GreaterEqualPunct => syntax_tree::Operator::GreaterEqual,
    LessEqualPunct => syntax_tree::Operator::LessEqual
}


TypeDecl: syntax_tree::Kind = {
    IntegerKW => syntax_tree::Kind::Int,
    RealKW => syntax_tree::Kind::Real,
    StringKW => syntax_tree::Kind::Str,
    BooleanKW => syntax_tree::Kind::Bool,
    VoidKW => syntax_tree::Kind::Void
}

Id: String = <s:r"[A-Za-z][A-Za-z_0-9]*"> => s.to_owned();
IntConst: i32 = <s:r"[0-9]+"> => s.parse::<i32>().unwrap();
RealConst: f64 = <s:r"[0-9]*\.[0-9]+"> => s.parse::<f64>().unwrap();
StrConst: String = <s:r#""[^"\n]*""#> => {
    let len = s.len() - 1;
    let s = &s[1..len];
    s.to_owned()
};

// punctuation
DotPunct = <".">;
ColonPunct = <":">;
SemicolonPunct = <";">;
CommaPunct = <",">;
OpenBracketPunct = <"(">;
CloseBracketPunct = <")">;
AssignPunct = <"=">;

// Control Flow Keywords
IfKW = <"if">;
FuncKW = <"func">;
BodyKW = <"body">;
EndKW = <"end">;
BreakKW = <"break">;
ThenKW = <"then">;
ElseKW = <"else">;
WhileKW = <"while">;
ForKW = <"for">;
DoKW = <"do">;
ToKW = <"to">;
ReturnKW = <"return">;

// built-in functions
ReadKW = <"read">;
WriteKW = <"write">;
WritelnKW = <"writeln">;

// math operators
PlusPunct = <"+">;
MinusPunct = <"-">;
MultiplyPunct = <"*">;
DividePunct = <"/">;

// boolean operators
AndKW = <"and">;
OrKW = <"or">;
NotKW = <"not">;

// order and equality operators
EqualPunct = <"==">;
NotEqualPunct = <"!=">;
GreaterPunct = <">">;
GreaterEqualPunct = <">=">;
LessPunct = <"<">;
LessEqualPunct = <"<=">;

// built-in types
IntegerKW = <"integer">;
RealKW = <"real">;
StringKW = <"string">;
BooleanKW = <"boolean">;
VoidKW = <"void">;

// logic valus
TrueKW = <"true">;
FalseKW = <"false">;

// define lexer rules
// keywords and symbols in match (high priority)
// id, numbers and strings in else (low priority)
match {

    // ignore white spaces and comments
    r"\s+" => {},
    r"#[^\n]*" => {},

    // punctuation
    r"\." => ".",
    r":" => ":",
    r";" => ";",
    r"," => ",",
    r"\(" => "(",
    r"\)" => ")",
    r"=" => "=",

    // keywords
    r"if" => "if",
    r"func" => "func",
    r"body" => "body",
    r"end" => "end",
    r"break" => "break",  
    r"then" => "then",
    r"else" => "else",
    r"while" => "while",
    r"for" => "for",
    r"do" => "do",
    r"to" => "to",
    r"return" => "return",

    // built-in functions
    r"read" => "read",
    r"write" => "write",
    r"writeln" => "writeln",

    // math operators
    r"\+" => "+",
    r"\-" => "-",
    r"\*" => "*",
    r"/" => "/",
    
    // boolean operators
    r"and" => "and",
    r"or" => "or",
    r"not" => "not",
    
    // order and equality operators
    r"==" => "==",
    r"!=" => "!=",
    r">" => ">",
    r">=" => ">=",
    r"<" => "<",
    r"<=" => "<=",
 
    // built-in types
    r"integer" => "integer",
    r"real" => "real",
    r"string" => "string",
    r"boolean" => "boolean",
    r"void" => "void",
    
    // logic values 
    r"true" => "true",
    r"false" => "false",
} else {
    // id
    r"[A-Za-z][A-Za-z_0-9]*",
    // integer
    r"[0-9]+",
    // float
    r"[0-9]*\.[0-9]+",
    // string
    r#""[^"\n]*""#
}


